// (1) Task Definitions

// BWA
deftask bwa-build( idx( File ) : fa( File ) )in bash *{
  bwa index -p bwa-index $fa
  tar cf $idx --remove-files bwa-index.*
}*

deftask bwa-align( sam( File ) : idx( File ) [fastq1( File ) fastq2( File )] )in bash *{
  tar xf $idx
  bwa mem -t <%= node[:saasfee][:variantcall][:threads] %> bwa-index $fastq1 $fastq2 > $sam
}*

// Bowtie 2
deftask bowtie2-build( idx( File ) : fa( File ) )in bash *{
  bowtie2-build $fa bt2idx
  if [ "$?" -ne "0" ]
  then
    echo Bowtie 2 build returned error. >&2
    exit -1
  fi
  tar cf $idx --remove-files bt2idx.*
}*

deftask bowtie2-align( sam( File ) : idx( File ) [fastq1( File ) fastq2( File )] )in bash *{
  tar xf $idx
  if [ "$?" -ne "0" ]
  then
    echo bowtie2-align returned error on extraction step. >&2
    exit -1
  fi
  bowtie2 -D 5 -R 1 -N 0 -L 22 -i S,0,2.50 \
  -p <%= node[:saasfee][:variantcall][:threads] %> \
  --no-unal -x bt2idx -1 $fastq1 -2 $fastq2 -S $sam
  if [ "$?" -ne "0" ]
  then
    echo bowtie2-align returned error on alignment step. >&2
    exit -1
  fi
  rm bt2idx.*
}*

// SAMtools
deftask samtools-view( bam( File ) : sam( File ) )in bash *{
  samtools view -bS $sam > $bam
}*

deftask samtools-faidx( fai( File ) : fa( File ) )in bash *{
  samtools faidx $fa
  fai=$fa.fai
}*

deftask samtools-sort( sortedbam( File ) : bam( File ) )in bash *{
  sortedbam=alignment-sorted.bam
  samtools sort -m `expr <%= node[:saasfee][:variantcall][:memory_mb] %> \* 512 \* 1024` $bam alignment-sorted
}*

deftask samtools-mpileup( mpileup( File ) : sortedbam( File ) [fa( File ) fai( File )] )in bash *{
  ln -s $fai $fa.fai
  samtools mpileup -f $fa $sortedbam > $mpileup
}*

deftask samtools-merge( merged( File ) : <bam( File )> )in bash *{
  if [ ${#bam[@]} -eq "0" ]
  then
    echo "No files to merge." >&2
    exit -1
  else
    if [ ${#bam[@]} -eq "1" ]
    then
      merged=$bam
    else
      samtools merge -f $merged ${bam[@]}
    fi
  fi
}*

// VarScan
deftask varscan( vcf( File ) : mpileup( File ) )in bash *{
  varscan mpileup2snp $mpileup --output-vcf --p-value 99e-02 > $vcf
}*

// ANNOVAR
deftask annovar( fun( File ) exonicfun( File ) : <vcf( File )> db( File ) buildver )in bash *{
  fun=table.variant_function
  exonicfun=table.exonic_variant_function
  tar xf $db
  cat ${vcf[@]} > infile
  convert2annovar.pl -format vcf4 infile | \
  annotate_variation.pl -buildver $buildver -geneanno -outfile table - db/
}*

deftask per-chromosome( fun( File ) exonicfun( File ) : [fa( File ) fai( File ) bt2idx( File )] <fastq1( File )> <fastq2( File )> db( File ) ) {
  sortedbam = per-fastq(
    fa:     fa,
    fai:    fai,
    fastq1: fastq1,
    fastq2: fastq2,
    db:     db );
  mergedbam = samtools-merge( bam: sortedbam );
  mpileup = samtools-mpileup(
    sortedbam: mergedbam,
    fa:  fa,
    fai: fai );
  vcf = varscan( mpileup: mpileup );
  fun exonicfun = annovar(
    vcf:      vcf,
    db:       db,
    buildver: '<%= node[:saasfee][:variantcall][:reference][:id] %>' );
}

deftask per-fastq( sortedbam : fa( File ) [fastq1( File ) fastq2( File )] db( File ) ) {
  sam = bwa-align(
    idx:    bt2idx,
    fastq1: fastq1,
    fastq2: fastq2 );
  bam = samtools-view( sam: sam );
  sortedbam = samtools-sort( bam: bam );
}

// (2) Input Files
fastq1 =<% @run_ids.each do |run_id| -%> '<%= node[:saasfee][:variantcall][:reads][:sample_id] %>/<%= run_id %>_1.filt.fastq'<% end -%>;
fastq2 =<% @run_ids.each do |run_id| -%> '<%= node[:saasfee][:variantcall][:reads][:sample_id] %>/<%= run_id %>_2.filt.fastq'<% end -%>;
fa =<% @chromosomes.each do |chromosome| -%> '<%= node[:saasfee][:variantcall][:reference][:id] %>/<%= chromosome %>.fa'<% end -%>;
db = '<%= node[:saasfee][:variantcall][:annovardb][:directory] %>/<%= node[:saasfee][:variantcall][:annovardb][:file] %>';

// (3) Workflow Definition
bt2idx = bwa-build( fa: fa );
fai = samtools-faidx( fa: fa );
fun exonicfun = per-chromosome(
  fa:     fa,
  bt2idx: bt2idx,
  fai:    fai,
  fastq1: fastq1,
  fastq2: fastq2,
  db:     db );

// (4) Query
fun exonicfun;
