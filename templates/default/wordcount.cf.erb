textpath = "<%= node[:saasfee][:wordcount][:input][:txt] %>";

deftask split( <splitpaths( File )> : textpath( File ) )in python *{

i, splitpaths = 0, []
with open(textpath) as text:
    for line in text:
        if line.startswith('***'):
            if splitpaths:
                with open(splitpaths[-1], 'w') as splitfile:
                    splitfile.write(split)
            splitpaths.append('split%i.txt' % i)
            i, split = i + 1, ""
        elif splitpaths and i > 0:
            split += line
splitpaths.pop()
}*

deftask count( splitcountpath( File ) : splitpath( File ) )in python *{

import pickle
from collections import Counter
with open(splitpath) as split:
    wordcount = Counter(split.read().split())
splitcountpath = '%s_counted.p' % splitpath
with open(splitcountpath, "wb") as splitcount:
    pickle.dump(wordcount, splitcount)
}*

deftask sortmerge( countpath( File ) : <splitcountpaths( File )> )in python *{

import pickle
from collections import Counter
wordcount, countpath = Counter(), 'counts.txt'
with open(countpath, 'w') as countfile:
    for splitcountpath in splitcountpaths:
        with open(splitcountpath, "rb") as splitcount:
            wordcount.update(pickle.load(splitcount))
    for word, count in wordcount.most_common():
        countfile.write('%s : %i\n' % (word, count))
}*

splitpaths = split( textpath: textpath );
splitcountpaths = count( splitpath: splitpaths );
countpath = sortmerge( splitcountpaths: splitcountpaths );

countpath;